#set($ClassName = "#javaName(${struct.name})")

${out.open("${model.name}/src/main/java/${struct.ePackage.qName.replace('.','/')}/${struct.javaName}.java")}
#JAVA_TOP()
package ${struct.ePackage.qName};


#GENERATED()
public  interface ${struct.javaName}
	extends ${struct.eModel.package}.${struct.eModel.javaName}Component
	{
	#foreach($att in ${struct.eAttributes})
	
	
	#if( ! ${att.needsList} )
	/** setter for field ${att.name}*/
	public void #setter(${att})(#fieldType1(${att}) ${att.name});
	
	#end
	
	
	/** getter for field ${att.name}*/
	public #fieldType1(${att}) #getter(${att})();
	#end
	
	}

#JAVA_BOTTOM()
${out.close()}

${out.open("${model.name}/src/main/java/${struct.ePackage.qName.replace('.','/')}/impl/${struct.javaName}Impl.java")}

package ${struct.ePackage.qName}.impl;
import ${struct.qName};


/**
 * implementation of ${struct.javaName}
 *
 */
#GENERATED()
public  class ${struct.javaName}Impl
	extends ${struct.eModel.package}.Abstract${struct.eModel.javaName}Component
	implements ${struct.qName}
	{
	/** LOG declaration */
	#LOGDECL()
	
	/** constructor */
	public ${struct.javaName}Impl()
		{
		}
	
	@Override
	public final ${struct.eModel.package}.${model.javaName}EntityType get${struct.eModel.javaName}EntityType()
		{
		return ${struct.eModel.package}.${model.javaName}EntityType.${struct.qName.replace(".","_")};
		}
	
	
	#foreach($att in ${struct.eAttributes})
	
	/** declaration of field ${att.name} */
	private #fieldType1(${att}) ${att.name} #if(${att.range.dataRange})#if(${att.representedAsPrimitive})/** TODO SET INIT */#{else}=null#{end}#{else}=null#end;
	
	
	#if( ! ${att.needsList} )
	/** setter for field ${att.name}*/
	@Override
	public void #setter(${att})(#fieldType1(${att})  ${att.name})
		{
		#fieldType1(${att}) oldValue=this.${att.name};
		this.${att.name}=${att.name};
		if(hasPropertyChangeSupport())
			{
			 this.propertyChangeSupport().firePropertyChange(
			 	"${att.name}",
			 	oldValue,
			 	this.${att.name}
			 	);
			}
		}
	#end
	
	/** getter for field ${att.name}*/
	@Override
	public #fieldType1(${att}) #getter(${att})()
		{
		#if(${att.needsList})if(this.${att.name}==null)
			{
			this.${att.name} = new java.util.ArrayList<#fieldType2(${att})>();
			}
		#end
		
		return this.${att.name};
		}
	#end
	
	@Override
	public final boolean isProxy()
		{
		return false;
		}
	
	
	@Override
	public String toString()
		{
		StringBuilder b=new StringBuilder(getClass().getName()+"[");
		#foreach($att in ${struct.eAttributes})
		#if(! ${att.needsList})
		
		b.append(" ${att.name}:").append(String.valueOf(this.${att.name}));
		
		#end
		#end
		
		b.append("]");
		return b.toString();
		}
		
	#foreach($att in ${struct.eStructuralFeatures})
	#if( ! ${att.needsList} )
	
	
		protected class ${att.javaName}List
		extends java.util.AbstractList<#fieldType3($att)>
			{
			private java.util.List<#fieldType3($att)> delegate=new java.util.ArrayList<#fieldType3($att)>();
			
			public ${att.javaName}List()
				{
				
				}
			
			@Override
			public void clear()
				{
				getDelegate().clear();
				}
			
			@Override
			public  boolean add(#fieldType3($att) ${att.name})
				{
				boolean b=false;
				b=getDelegate().add(${att.name});
				return b;
				}
			
			@Override
			public int size()
				{
				return getDelegate().size();
				}
			
			protected  java.util.List<#fieldType3($att)> getDelegate()
				{
				return this.delegate;
				}
			@Override
			public #fieldType3($att) get(int index)
				{
				return getDelegate().get(index);
				}
			}
	
	#end
	#end	
		
	}
${out.close()}



${out.open("${model.name}/src/main/java/${struct.ePackage.qName.replace('.','/')}/impl/${struct.javaName}Wrapper.java")}

package ${struct.ePackage.qName}.impl;
import ${struct.qName};


/**
 * Proxy class of ${struct.javaName}
 *
 */
#GENERATED()
public  class ${struct.javaName}Wrapper
	extends ${struct.eModel.package}.Abstract${struct.eModel.javaName}Component
	implements ${struct.qName} , ${model.package}.Wrapper<${struct.javaName}>
	{
	/** LOG declaration */
	#LOGDECL()
	
	private ${struct.qName} _delegate=null;
	
	/** constructor */
	public ${struct.javaName}Wrapper()
		{
		}
	
	@Override
	public ${struct.qName} getDelegate()
		{
		if(this._delegate==null)
			{
			
			}
		return this._delegate;
		}
	
	@Override
	public  ${struct.eModel.package}.${model.javaName}EntityType get${struct.eModel.javaName}EntityType()
		{
		return ${struct.eModel.package}.${model.javaName}EntityType.${struct.qName.replace(".","_")};
		}
	
	
	#foreach($att in ${struct.eAttributes})
	
	
	
	#if( ! ${att.needsList} )
	/** setter for field ${att.name}*/
	@Override
	public void #setter(${att})(#fieldType1(${att})  ${att.name})
		{
		delegate().#setter(${att})( ${att.name});
		}
	#end
	
	/** getter for field ${att.name}*/
	@Override
	public #fieldType1(${att}) #getter(${att})()
		{
		return delegate().#getter(${att})();
		}
	#end
	
	@Override
	public final boolean isProxy()
		{
		return true;
		}
	
	@Override
	public String toString()
		{
		return delegate()==null?"null":delegate().toString();
		}
	}
${out.close()}


${out.open("${model.name}/src/main/java/${struct.ePackage.qName.replace('.','/')}/ui/table/${struct.javaName}TableModel.java")}
#JAVA_TOP()
package ${struct.ePackage.qName}.ui.table;
import ${struct.qName};


#GENERATED()
@SuppressWarnings("serial")
public class ${struct.javaName}TableModel
	extends ${struct.eModel.package}.ui.tree.AbstractGenericTableModelWithColumns<${struct.javaName}>
	{
	/** LOG declaration */
	#LOGDECL()
	
	public ${struct.javaName}TableModel()
		{
		super();
		}
		
	public ${struct.javaName}TableModel(java.util.List<${struct.javaName}> rows)
		{
		super(rows);
		initColumns();
		}
	
	@Override
	protected void initColumns()
		{
		#foreach($att in ${struct.eAttributes})
		#if( ! ${att.needsList} )
		
		super.getColumns().add(
			new ${struct.eModel.package}.ui.tree.Column<${struct.qName}>()
				{
				@Override
				public String getColumnName()
					{
					return "${att.label}";
					}
				@Override
				public Class<?> getColumnClass()
					{
					return  #fieldType1(${att}).class;
					}
				@Override
				public Object getValue(final ${struct.qName} object)
					{
					return object==null?null:object.#getter(${att})();
					}
				}
			);
		
		#end
		#end
		
		}
	}

#JAVA_BOTTOM()
${out.close()}

${out.open("${model.name}/src/main/java/${struct.ePackage.qName.replace('.','/')}/ui/tree/${struct.javaName}TreeNode.java")}

package ${struct.ePackage.qName}.ui.tree;
import ${struct.qName};


#GENERATED()
@SuppressWarnings("serial")
public class ${struct.javaName}TreeNode
	implements javax.swing.tree.TreeNode
	{
	private ${struct.qName} ${struct.name};
	private java.util.List<javax.swing.tree.TreeNode> children=
		new java.util.Vector<javax.swing.tree.TreeNode>();
	
	public  ${struct.javaName}TreeNode( ${struct.qName} ${struct.name})
		{
		this.${struct.name}=${struct.name};
		
		}
	@Override
	public  java.util.Enumeration children()
		{
		return java.util.Collections.enumeration(this.getChildren());
		}
	
	protected java.util.List<javax.swing.tree.TreeNode> getChildren()
		{
		return this.children;
		}
	
	public   ${struct.qName}  get${struct.javaName}()
		{
		return this.${struct.name};
		}
	
	@Override
	public int 	getChildCount()
		{
		return getChildren().size();
		}
	
	@Override
	public int getIndex(javax.swing.tree.TreeNode node)
		{
		return getChildren().indexOf(node);
		}
		
	@Override
	public javax.swing.tree.TreeNode getChildAt(int childIndex)
		{
		return getChildren().get(childIndex);
		}
	@Override
	public boolean getAllowsChildren()
		{
		return true;
		}
		
	@Override
	public final boolean isLeaf()
		{
		return false;
		}
	
	public final javax.swing.tree.TreeNode getParent()
		{
		return null;
		}
	
	@Override
	public String toString()
		{
		return "${struct.name}";
		}
	}

${out.close()}

${out.open("${model.name}/src/main/java/${struct.ePackage.qName.replace('.','/')}/ui/desktop/${struct.javaName}ListFrame.java")}

package ${struct.ePackage.qName}.ui.tree;


#GENERATED()
@SuppressWarnings("serial")
public class ${struct.javaName}ListFrame
	extends ${struct.eModel.package}.ui.desktop.AbstractInternalFrame
	{
	public ${struct.javaName}ListFrame()
		{
		this.setTitle("");
		}
	}
${out.close()}


