#parse("common.vm")

${out.open("${model.name}/README.md")}
Hello World
${out.close()}

#parse("ant01.vm")

#foreach($pack in ${model.ePackages})
#parse("package01.vm")
#end


${out.open("${model.name}/src/main/java/${model.package.replace('.','/')}/${model.javaName}EntityType.java")}
#JAVA_TOP()
package ${model.package};

#GENERATED()
public enum ${model.javaName}EntityType
	{
	#foreach($struct in  ${model.allEClasses})#if($velocityCount > 1),#end
	${struct.qName.replace(".","_")}
	#end
	}

#JAVA_BOTTOM()
${out.close()}

${out.open("${model.name}/src/main/java/${model.package.replace('.','/')}/${model.javaName}.java")}
#JAVA_TOP()
package ${model.package};

#GENERATED()
public interface ${model.javaName}
	{
	
	}

#JAVA_BOTTOM()
${out.close()}

${out.open("${model.name}/src/main/java/${model.package.replace('.','/')}/Default${model.javaName}.java")}
#JAVA_TOP()
package ${model.package};

#GENERATED()
public class Default${model.javaName}
	implements ${model.javaName}
	{
	public Default${model.javaName}()
		{
		}
	@Override
	public String toString()	
		{
		return "${model.name}";
		}
	}

#JAVA_BOTTOM()
${out.close()}


${out.open("${model.name}/src/main/java/com/github/lindenb/swing/AbstractGenericTableModel.java")}
package  com.github.lindenb.swing;

import java.util.List;
import java.util.Vector;
import javax.swing.table.AbstractTableModel;

@SuppressWarnings("serial")
public abstract class AbstractGenericTableModel<T>
	 extends AbstractTableModel
	{
	/** LOG declaration */
	#LOGDECL()
	
	private List<T> rows=new Vector<T>();
	
	public AbstractGenericTableModel()
		{
		}
	
	public AbstractGenericTableModel(List<T> rows)
		{
		this.rows=new Vector<T>(rows);
		}
	
	@Override
	public abstract Class<?> getColumnClass(int col);
	
	@Override
	public abstract String getColumnName(int col);
	
	public List<T> getRows()
		{
		return rows;
		}
	
	public void setRows(List<T> rows)
		{
		this.rows = new Vector<T>(rows);
		fireTableDataChanged();
		}
	
	public void setElementAt(int row,T o)
		{
		this.rows.set(row, o);
		this.fireTableRowsUpdated(row, row);
		}
	
	public T getElementAt(int i)
		{
		return this.getRows().get(i);
		}
	
	public abstract Object getValueOf(final T o, int col);
	
	@Override
	public final Object getValueAt(int row, int col)
		{
		T rsrc=getElementAt(row);
		return rsrc==null?null:getValueOf(rsrc,col);
		}
	
	public void addElement(T o)
		{
		int n=getRowCount();
		this.rows.add(o);
		fireTableRowsInserted(n, n);
		}		
	
	@Override
	public int getRowCount()
		{
		return rows.size();
		}
	@Override
	public boolean isCellEditable(int arg0, int arg1)
		{
		return false;
		}
	public void clear()
		{
		this.rows.clear();
		fireTableDataChanged();
		}
	}


${out.close()}


${out.open("${model.name}/src/main/java/${model.package.replace('.','/')}/${model.javaName}Component.java")}
#JAVA_TOP()
package ${model.package};

#GENERATED()
public interface ${model.javaName}Component
	{
	/** returns the associated ${model.javaName} */
	public ${model.javaName} get${model.javaName}();
	
	/** returns the type of entity */
	public ${model.package}.${model.javaName}EntityType get${model.javaName}EntityType();
	}

#JAVA_BOTTOM()
${out.close()}

${out.open("${model.name}/src/main/java/${model.package.replace('.','/')}/Abstract${model.javaName}Component.java")}
#JAVA_TOP()
package ${model.package};

public abstract class Abstract${model.javaName}Component
	implements ${model.javaName}Component
	{
	private transient ${model.javaName} _owner=null;
	protected Abstract${model.javaName}Component()
		{
		}
	
	@Override
	public ${model.javaName} get${model.javaName}()
		{
		return this._owner;
		}
	
	public void set${model.javaName}(${model.javaName} owner)
		{
		this._owner=owner;
		}
	@Override
	public abstract ${model.package}.${model.javaName}EntityType get${model.javaName}EntityType();
	}
#JAVA_BOTTOM()
${out.close()}


${out.open("${model.name}/src/main/java/${model.package.replace('.','/')}/ui/provider/LabelProvider.java")}
#JAVA_TOP()
package ${model.package}.ui.provider;

public interface LabelProvider<T>
	{
	public javax.swing.Icon getIcon(final T object,int size);
	public String getLabel(java.lang.Object object);
	}
#JAVA_BOTTOM()
${out.close()}


package com.github.lindenb.${model.name.toLowerCase()}.ui.tree

public class ${model.javaName}TreeNode
	implements javax.swing.tree.TreeNode
	{
	private ${model.javaName} model;
	private java.util.List<javax.swing.tree.TreeNode> children=
		new java.util.Vector<javax.swing.tree.TreeNode>();
	
	public  ${model.javaName}TreeNode( ${model.javaName} model)
		{
		this.model=model;
		#foreach($c in ${pack.eClasses})
		children.add(null);
		#end
		}
		
	protected List<javax.swing.tree.TreeNode> getChildren()
		{
		retunr this.children;
		}
	
	public  ${model.javaName}  get${model.javaName}()
		{
		return this.model;
		}
	
	@Override
	public int 	getChildCount()
		{
		return getChildren().size();
		}
	
	@Override
	public int getIndex(TreeNode node)
		{
		return getChildren().indexOf(node);
		}
		
	@Override
	public TreeNode getChildAt(int childIndex)
		{
		return getChildren().elementAt(childIndex);
		}
			
	@Override
	public final boolean isLeaf()
		{
		return false;
		}
	
	public final TreeNode getParent()
		{
		return null;
		}
	
	@Override
	public String toString()
		{
		return "${model.name}";
		}
	}


