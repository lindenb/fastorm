#parse("common.vm")

${out.open("${model.name}/README.md")}
Hello World
${out.close()}

#parse("ant01.vm")

#foreach($pack in ${model.ePackages})
#parse("package01.vm")
#end

${out.open("${model.name}/src/main/java/${model.package.replace('.','/')}/util/Function.java")}
#JAVA_TOP()
package ${model.package}.util;

public interface Function<FROM,TO>
	{
	public TO apply(FROM input);
	}

#JAVA_BOTTOM()
${out.close()}


${out.open("${model.name}/src/main/java/${model.package.replace('.','/')}/util/Predicate.java")}
#JAVA_TOP()
package ${model.package}.util;

public interface Predicate<T>
	{
	public boolean accept(T input);
	}

#JAVA_BOTTOM()
${out.close()}


${out.open("${model.name}/src/main/java/${model.package.replace('.','/')}/${model.javaName}EntityType.java")}
#JAVA_TOP()
package ${model.package};

#GENERATED()
public enum ${model.javaName}EntityType
	{
	#foreach($struct in  ${model.allEClasses})#if($velocityCount > 1),#end
	${struct.qName.replace(".","_")}
	#end
	}

#JAVA_BOTTOM()
${out.close()}

${out.open("${model.name}/src/main/java/${model.package.replace('.','/')}/${model.javaName}.java")}
#JAVA_TOP()
package ${model.package};

#GENERATED()
public interface ${model.javaName}
	{
	public java.math.BigInteger getNextId();
	}

#JAVA_BOTTOM()
${out.close()}

${out.open("${model.name}/src/main/java/${model.package.replace('.','/')}/Default${model.javaName}.java")}
#JAVA_TOP()
package ${model.package};

#GENERATED()
public class Default${model.javaName}
	implements ${model.javaName}
	{
	public Default${model.javaName}()
		{
		}
	
	@Override
	public java.math.BigInteger getNextId()
		{
		return null;
		}	
	
		
	@Override
	public String toString()	
		{
		return "${model.name}";
		}
	}

#JAVA_BOTTOM()
${out.close()}


${out.open("${model.name}/src/main/java/${model.package.replace('.','/')}/ui/tree/AbstractGenericTableModel.java")}
#JAVA_TOP()
package ${model.package}.ui.tree;



import java.util.List;
import java.util.Vector;
import javax.swing.table.AbstractTableModel;

@SuppressWarnings("serial")
public abstract class AbstractGenericTableModel<T>
	 extends AbstractTableModel
	{
	/** LOG declaration */
	#LOGDECL()
	
	private List<T> rows=new Vector<T>();
	
	public AbstractGenericTableModel()
		{
		}
	
	public AbstractGenericTableModel(List<T> rows)
		{
		this.rows=new Vector<T>(rows);
		}
	
	@Override
	public abstract Class<?> getColumnClass(int col);
	
	@Override
	public abstract String getColumnName(int col);
	
	public List<T> getRows()
		{
		return rows;
		}
	
	public void setRows(List<T> rows)
		{
		this.rows = new Vector<T>(rows);
		fireTableDataChanged();
		}
	
	public void setElementAt(int row,T o)
		{
		this.rows.set(row, o);
		this.fireTableRowsUpdated(row, row);
		}
	
	public T getElementAt(int i)
		{
		return this.getRows().get(i);
		}
	
	public abstract Object getValueOf(final T o,int col);
	
	@Override
	public final Object getValueAt(int row, int col)
		{
		T rsrc=getElementAt(row);
		return rsrc==null?null:getValueOf(rsrc,col);
		}
	
	public void addElement(T o)
		{
		int n=getRowCount();
		this.rows.add(o);
		fireTableRowsInserted(n, n);
		}		
	
	@Override
	public int getRowCount()
		{
		return rows.size();
		}
	@Override
	public boolean isCellEditable(int arg0, int arg1)
		{
		return false;
		}
	public void clear()
		{
		this.rows.clear();
		fireTableDataChanged();
		}
	}

#JAVA_BOTTOM()
${out.close()}


${out.open("${model.name}/src/main/java/${model.package.replace('.','/')}/${model.javaName}Component.java")}
#JAVA_TOP()
package ${model.package};

#GENERATED()
public interface ${model.javaName}Component
	{
	/** returns the associated ${model.javaName} */
	public ${model.javaName} get${model.javaName}();
	
	/** returns the type of entity */
	public ${model.package}.${model.javaName}EntityType get${model.javaName}EntityType();
	
	

	public void addPropertyChangeListener(java.beans.PropertyChangeListener listener);


	public void removePropertyChangeListener(java.beans.PropertyChangeListener listener);
	
	/** returns wether this object is a proxy or a concrete class */
	public boolean isProxy();
	
	/** get this object id */
	public java.math.BigInteger getId();
	}

#JAVA_BOTTOM()
${out.close()}

${out.open("${model.name}/src/main/java/${model.package.replace('.','/')}/Abstract${model.javaName}Component.java")}
#JAVA_TOP()
package ${model.package};

public abstract class Abstract${model.javaName}Component
	implements ${model.javaName}Component
	{
	#LOGDECL()
	private java.beans.PropertyChangeSupport _pcs = null;
	private transient ${model.javaName} _owner=null;
	private java.math.BigInteger _id=null;
	
	
	protected Abstract${model.javaName}Component()
		{
		}
	
	protected boolean hasPropertyChangeSupport()
		{
		return this._pcs!=null;
		}
		
	protected java.beans.PropertyChangeSupport propertyChangeSupport()
		{
		if(this._pcs==null) this._pcs=new java.beans.PropertyChangeSupport(this);
		return this._pcs;
		}
	
	@Override
	public void addPropertyChangeListener(java.beans.PropertyChangeListener listener)
	 	{
        this.propertyChangeSupport().addPropertyChangeListener(listener);
     	}

	@Override
	public void removePropertyChangeListener(java.beans.PropertyChangeListener listener)
     	{
        this.propertyChangeSupport().removePropertyChangeListener(listener);
     	}
	
	
		
	@Override
	public ${model.javaName} get${model.javaName}()
		{
		return this._owner;
		}
	
	public void set${model.javaName}(${model.javaName} owner)
		{
		this._owner=owner;
		}
	@Override
	public abstract ${model.package}.${model.javaName}EntityType get${model.javaName}EntityType();
	
	
		/** get this object id */
	public java.math.BigInteger getId()
		{
		return this._id;
		}
		
	public void setId(java.math.BigInteger id)
		{
		if(this._id!=null && !this._id.equals(id))
			{
			throw new IllegalStateException("id already defined");
			}
		this._id=id;
		}
	
	}
#JAVA_BOTTOM()
${out.close()}


${out.open("${model.name}/src/main/java/${model.package.replace('.','/')}/Wrapper.java")}
#JAVA_TOP()
package ${model.package};

#GENERATED()
public interface Wrapper<T>
	{
	/** returns the wrapped object */
	public T getDelegate();
	}

#JAVA_BOTTOM()
${out.close()}

${out.open("${model.name}/src/main/java/${model.package.replace('.','/')}/util/AbstractList.java")}
#JAVA_TOP()
package ${model.package}.util;

public abstract class AbstractList<T>
	extends java.util.AbstractList<T>
	{
	#LOGDECL()
	
	public final int getSize()
		{
		return this.size();
		}
	}
#JAVA_BOTTOM()
${out.close()}



${out.open("${model.name}/src/main/java/${model.package.replace('.','/')}/ui/provider/LabelProvider.java")}
#JAVA_TOP()
package ${model.package}.ui.provider;

public interface LabelProvider<T>
	{
	public javax.swing.Icon getIcon(final T object,int size);
	public String getLabel(final T object);
	}
#JAVA_BOTTOM()
${out.close()}


${out.open("${model.name}/src/main/java/${model.package.replace('.','/')}/ui/tree/Column.java")}
#JAVA_TOP()
package ${model.package}.ui.tree;

public interface Column<T>
	{
	public String getColumnName();
	public Class<?> getColumnClass();
	public Object getValue(final T object);
	}

#JAVA_BOTTOM()
${out.close()}


${out.open("${model.name}/src/main/java/${model.package.replace('.','/')}/ui/tree/AbstractGenericTableModelWithColumns.java")}
#JAVA_TOP()
package ${model.package}.ui.tree;


import java.util.List;
import java.util.Vector;

@SuppressWarnings("serial")
public abstract class AbstractGenericTableModelWithColumns<T>
	 extends AbstractGenericTableModel<T>
	{
	/** LOG declaration */
	#LOGDECL()
	
	private List<Column<T>> columns=new Vector<Column<T>>();
	
	public AbstractGenericTableModelWithColumns()
		{
		initColumns();
		}
	
	public AbstractGenericTableModelWithColumns(List<T> rows)
		{
		super(rows);
		initColumns();
		}
	
	protected List<Column<T>> getColumns()
		{
		return this.columns;
		}
	
	protected abstract void initColumns();
		
		
		
	@Override
	public int 	getColumnCount()
		{
		return this.getColumns().size();
		}
	
	@Override
	public Class<?> getColumnClass(int col)
		{
		return this.getColumns().get(col).getColumnClass();
		}
	
	@Override
	public String getColumnName(int col)
		{
		return this.getColumns().get(col).getColumnName();
		}
	

	@Override
	public Object getValueOf(final T o,int col)
		{
		return this.getColumns().get(col).getValue(o);
		}

	
	
	}

#JAVA_BOTTOM()
${out.close()}

${out.open("${model.name}/src/main/java/${model.package.replace('.','/')}/ui/desktop/AbstractInternalFrame.java")}
#JAVA_TOP()
package ${model.package}.ui.desktop;

@SuppressWarnings("serial")
public abstract class AbstractInternalFrame
	extends javax.swing.JInternalFrame
	{
	#LOGDECL()
	public AbstractInternalFrame()
		{
		
		}
	protected void createUI()
		{
		}
	}
#JAVA_BOTTOM()
${out.close()}


${out.open("${model.name}/src/main/java/${model.package.replace('.','/')}/ui/desktop/AbstractInternalListFrame.java")}
#JAVA_TOP()
package ${model.package}.ui.desktop;

@SuppressWarnings("serial")
public abstract class AbstractInternalListFrame<T extends ${model.package}.${model.javaName}Component>
	extends AbstractInternalFrame
	{
	#LOGDECL()
	public AbstractInternalListFrame()
		{
		
		}
	@Override
	protected void createUI()
		{
		
		}
	/*
	protected ${model.package}.ui.tree.AbstractGenericTableModel<T> getTableModel();
	public abstract ${model.package}.${model.javaName}EntityType get${model.javaName}EntityType();
	*/
	}
#JAVA_BOTTOM()
${out.close()}

${out.open("${model.name}/src/main/java/${model.package.replace('.','/')}/ui/primitives/AbstractPrimitiveTextField.java")}
#JAVA_TOP()
package ${model.package}.ui.primitives;

@SuppressWarnings("serial")
public abstract class AbstractPrimitiveTextField
	extends javax.swing.JPanel
	{
	#LOGDECL()
	
	protected  AbstractPrimitiveTextField()
		{
		super(new java.awt.BorderLayout());
		}
	
	protected abstract javax.swing.text.JTextComponent getTextComponent();
	}

#JAVA_BOTTOM()
${out.close()}

${out.open("${model.name}/src/main/java/${model.package.replace('.','/')}/ui/primitives/AbstractMultiValuesEditor.java")}
#JAVA_TOP()
package ${model.package}.ui.primitives;

@SuppressWarnings("serial")
public abstract class AbstractMultiValuesEditor
	extends javax.swing.JPanel
	{
	#LOGDECL()
	
	protected javax.swing.List jlist=null;
	
	protected  AbstractMultiValuesEditor()
		{
		super(new java.awt.BorderLayout());
		
		this.jlist=new javax.swing.List.JList();
		javax.swing.JScrollPane scroll=new new javax.swing.List.JScrollPane(this.jlist);
		this.add(scroll,java.awt.BorderLayout.CENTER);
		
		}
	
	
	}

#JAVA_BOTTOM()
${out.close()}


#foreach($primitive in ${model.allEPrimitives} )
${out.open("${model.name}/src/main/java/${model.package.replace('.','/')}/ui/primitives/${primitive.javaClass.simpleName}TextField.java")}

#JAVA_TOP()
package ${model.package}.ui.primitives;

@SuppressWarnings("serial")
public class ${primitive.javaClass.simpleName}TextField
	extends AbstractPrimitiveTextField
	{
	#LOGDECL()
	
	#if( ${primitive.javaClass.simpleName} == "String")
	
	private javax.swing.text.JTextComponent  tfField;
	
	public  ${primitive.javaClass.simpleName}TextField()
		{
		this(false);
		}
	
	#else
	
	private javax.swing.JTextField tfField;
	
	
	#end
	
	
	public  ${primitive.javaClass.simpleName}TextField(#if( ${primitive.javaClass.simpleName} == "String") boolean multiline #end )
		{
		#if( ${primitive.javaClass.simpleName} == "String")
		
		if(multiline)
			{
			tfField= new  javax.swing.JTextArea();
			javax.swing.JScrollPane scroll=new javax.swing.JScrollPane(tfField);
			super.add(scroll,java.awt.BorderLayout.CENTER);
			}
		else
		 	{
		#end
			this.tfField= new  javax.swing.JTextField();
			super.add(this.tfField,java.awt.BorderLayout.CENTER);
		#if( ${primitive.javaClass.simpleName} == "String")
			}
		#end
		}
		
	@Override
	protected javax.swing.text.JTextComponent getTextComponent()
		{
		return this.tfField;
		}	
	
	public  ${primitive.javaClass.name} get${primitive.javaClass.simpleName}Value()
		{
		String lit=getTextComponent().getText();
		#if( ${primitive.javaClass.simpleName} == "String")
		
		return lit;
		
		#else
		
		return null;
		
		#end
		
		} 
	
	}

#JAVA_BOTTOM()
${out.close()}


${out.open("${model.name}/src/main/java/${model.package.replace('.','/')}/ui/primitives/${primitive.javaClass.simpleName}MultiValuesEditor.java")}

#JAVA_TOP()
package ${model.package}.ui.primitives;

@SuppressWarnings("serial")
public class ${primitive.javaClass.simpleName}MultiValuesEditor
	extends ${model.package}.ui.primitives.AbstractMultiValuesEditor
	{	
	public  ${primitive.javaClass.simpleName}MultiValuesEditor()
		{
		this(false);
		}
	}

#JAVA_BOTTOM()
${out.close()}


#end
